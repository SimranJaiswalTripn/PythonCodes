#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np
from faker import Faker
import random
from datetime import datetime

# Initialize Faker
fake = Faker()

# Generate dataset
np.random.seed(42)
num_records = 1000

data = {
    "OrderID": np.arange(1, num_records + 1),
    "CustomerName": [fake.name() for _ in range(num_records)],
    "CustomerRegion": np.random.choice(["North", "South", "East", "West"], size=num_records),
    "Category": np.random.choice(["Electronics", "Clothing", "Home Appliances", "Accessories"], size=num_records),
    "Product": np.random.choice(
        ["Laptop", "Phone", "Monitor", "TV", "Blender", "Sofa", "T-Shirt", "Watch"], size=num_records
    ),
    "Price": np.random.randint(100, 1000, size=num_records),
    "Quantity": np.random.randint(1, 10, size=num_records),
    "OrderDate": pd.date_range(start="2022-01-01", periods=num_records).to_list(),
    "CustomerSatisfaction": np.random.randint(1, 6, size=num_records),  # Satisfaction scores between 1-5
}

df = pd.DataFrame(data)
df["TotalRevenue"] = df["Price"] * df["Quantity"]
df.head()



# In[2]:


# Calculate the total revenue generated by each product.
ProductRevenue=df.groupby("Product")["TotalRevenue"].sum()
ProductRevenue


# In[3]:


# Identify the region with the highest total revenue for "Clothing."
clothings=df[df["Category"]=="Clothing"]
highestregion=clothings.groupby("CustomerRegion")["TotalRevenue"].sum()
highestregion.sort_values(ascending=False).head(1)


# In[4]:


# Find the top 5 products with the highest total revenue.
# Calculate the total revenue generated by each product.
ProductRevenue=df.groupby("Product")["TotalRevenue"].sum()
ProductRevenue.sort_values(ascending=False).head(5)


# In[5]:


# List all orders for customers in the "North" region who purchased "Electronics."
NorthElectronics=df[(df["CustomerRegion"]=="North")&(df["Category"]=="Electronics")]
NorthElectronics


# In[6]:


# Calculate the average CustomerSatisfaction score for each CustomerRegion and sort the results.
Cust_Sat_Region=df.groupby("CustomerRegion")["CustomerSatisfaction"].mean()
Cust_Sat_Region.sort_values(ascending=False)


# In[7]:


# Determine the product in each Category with the highest total revenue.
Catrevenue=df.groupby(["Product","Category"])["TotalRevenue"].sum().reset_index()
Catrevenue1=Catrevenue.loc[Catrevenue.groupby("Category")["TotalRevenue"].idxmax()]
Catrevenue1


# In[8]:


# Find the percentage contribution of each region to the total revenue.
regionsale=df.groupby("CustomerRegion")["TotalRevenue"].sum()
Total=df["TotalRevenue"].sum()
# print(Total)
regionsaleper=(regionsale/Total)*100
regionsaleper


# In[9]:


# For each Category, calculate the median revenue per order.
cat_median= df.groupby("Category")["TotalRevenue"].median()
cat_median


# In[10]:


# Create a pivot table to show the total revenue for each product across regions.
newpivot=df.pivot_table(values="TotalRevenue",
                        index="Product",
                       columns="CustomerRegion",
                       aggfunc="sum")
newpivot


# In[11]:


# Create a pivot table showing the average CustomerSatisfaction for each category and region. Date-Based Analysis

pivot2=df.pivot_table(values="CustomerSatisfaction",
                      index="Category",
                     columns="CustomerRegion",
                     aggfunc="mean")

pivot2


# In[12]:


# Calculate the total revenue generated in each month of 2022.
df["Month"]=df["OrderDate"].dt.month
df["Year"]=df["OrderDate"].dt.year
df.head(5)


# In[13]:


Year2022=df[df["Year"]==2022]
monthrevenue2022=Year2022.groupby("Month")["TotalRevenue"].sum()
monthrevenue2022


# In[14]:


# Identify the product with the highest total revenue in the second quarter of 2022.
Quater2022=Year2022[Year2022["Month"].isin([4,5,6])]
highesttotalrevenueQ2=Quater2022.groupby("Product")["TotalRevenue"].sum()
highesttotalrevenueQ2.sort_values(ascending=False).head(1)


# In[15]:


# Rank all products by their total revenue and display the top 10.
total=df.groupby("Product")["TotalRevenue"].sum().reset_index()
total["Rank"]=total["TotalRevenue"].rank()
total


# In[16]:


# Within each category, rank products by their average CustomerSatisfaction score.
pi=df.groupby(["Product","Category"])["CustomerSatisfaction"].mean().reset_index()
pi["rank"]=pi.groupby("Category")["CustomerSatisfaction"].rank()
pi=pi.sort_values(["Category","rank"])
pi


# In[19]:


# Find customers who placed more than 1 orders and calculate their total revenue.
NoOfOrder=df.groupby("CustomerName").agg(NoOfOrder=("OrderID","nunique"),TotalRevenue=("TotalRevenue","sum")).reset_index()
NoOfOrdermore3=NoOfOrder[NoOfOrder["NoOfOrder"]>1]
NoOfOrdermore3


# In[22]:


# Identify the category with the highest average revenue per order.
hightest=df.groupby("Category").agg(TotalRevenue=("TotalRevenue","sum"),TotalOrder=("OrderID","nunique")).reset_index()
hightest["Average"]=hightest["TotalRevenue"]/hightest["TotalOrder"]
hightest.sort_values("Average",ascending=False).head(1)


# In[23]:


# Add a column to calculate the profit margin for each product, assuming a 30% profit margin on the price.
df["ProfitMargin"]=df["Price"]*0.30
df


# In[46]:


# Determine the product that has the highest average revenue per order, grouped by region.
hightest1=df.groupby(["Category","CustomerRegion"]).agg(
    TotalRevenue=("TotalRevenue","sum"),
    TotalOrder=("OrderID","nunique")
).reset_index()


hightest1["Average"]=hightest1["TotalRevenue"]/hightest1["TotalOrder"]

hightest1_idx=hightest1.groupby("CustomerRegion")["Average"].idxmax()


hightest1_result = hightest1.iloc[hightest1_idx]

hightest1_result


# In[48]:


# Find the most frequently ordered product for each region.

data=df.groupby(["Product","CustomerRegion"])["OrderID"].nunique().reset_index()
Highest_indx=data.groupby("CustomerRegion")["OrderID"].idxmax()
Highest_product_region=data.iloc[Highest_indx]
Highest_product_region


# In[ ]:


# Calculate the rolling 7-day average revenue for the entire dataset.
df["RollingAvg"]=df["TotalRevenue"].rolling(window=7).mean()
df.head(10)

